{
    "docs": [
        {
            "location": "/", 
            "text": "Image+\n\n\nImage+ is an advanced image custom template variable type for MODx Revolution. The dimensions for the uploaded image can \n(optionally) be configured to constrain a minimal width and/or height. The image crop could be forced to remain at a \npre-set ratio. A graphical tool could be used to crop the image to the required dimensions/proportions.\n\n\nRequirements\n\n\n\n\nMODX Revolution 2.2.4+\n\n\nPHP v5.3+\n\n\nMODX Cropping Engine i.e. \npThumb\n\n\n\n\nFeatures\n\n\n\n\nVisual Image cropping tool integrated into the MODX manager interface.\n\n\nOption to constrain minimal width and/or height for the uploaded image. \n\n\nUser image crop can be forced to remain at pre-set ratio.\n\n\nUse a chunk as an output template and fill placeholders with url, height, width, alt-tag, phpthumb options etc of the \n  cropped uploaded image.\n\n\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 13]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Home"
        }, 
        {
            "location": "/#image", 
            "text": "Image+ is an advanced image custom template variable type for MODx Revolution. The dimensions for the uploaded image can \n(optionally) be configured to constrain a minimal width and/or height. The image crop could be forced to remain at a \npre-set ratio. A graphical tool could be used to crop the image to the required dimensions/proportions.", 
            "title": "Image+"
        }, 
        {
            "location": "/#requirements", 
            "text": "MODX Revolution 2.2.4+  PHP v5.3+  MODX Cropping Engine i.e.  pThumb", 
            "title": "Requirements"
        }, 
        {
            "location": "/#features", 
            "text": "Visual Image cropping tool integrated into the MODX manager interface.  Option to constrain minimal width and/or height for the uploaded image.   User image crop can be forced to remain at pre-set ratio.  Use a chunk as an output template and fill placeholders with url, height, width, alt-tag, phpthumb options etc of the \n  cropped uploaded image.    \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 13]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Features"
        }, 
        {
            "location": "/installation/", 
            "text": "Install from MODX Extras\n\n\nSearch for Image+ in the Package Manager of a MODX installation and install it in there.\n\n\nManual installation\n\n\nIf you can't access the MODX Extras Repository in your MODX installation, you can manually install Image+.\n\n\n\n\nDownload the transport package from \nMODX Extras\n\n  (or one of the pre built transport packages in \n_packages\n)\n\n\nUpload the zip file to your MODX installation's \ncore/packages\n folder.\n\n\nIn the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown \n  button.\n\n\nImage+ should now show up in the list of available packages. Click the corresponding 'Install' button and follow \n  instructions to complete the installation.\n\n\n\n\nBuild it from source\n\n\nTo build and install the package from source you could use \nGit Package Management\n. \nThe GitHub repository of Image+ contains a \nconfig.json\n \nto build that package locally. Use this option, if you want to debug Image+ and/or contribute bugfixes and enhancements.\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 13]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#install-from-modx-extras", 
            "text": "Search for Image+ in the Package Manager of a MODX installation and install it in there.", 
            "title": "Install from MODX Extras"
        }, 
        {
            "location": "/installation/#manual-installation", 
            "text": "If you can't access the MODX Extras Repository in your MODX installation, you can manually install Image+.   Download the transport package from  MODX Extras \n  (or one of the pre built transport packages in  _packages )  Upload the zip file to your MODX installation's  core/packages  folder.  In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown \n  button.  Image+ should now show up in the list of available packages. Click the corresponding 'Install' button and follow \n  instructions to complete the installation.", 
            "title": "Manual installation"
        }, 
        {
            "location": "/installation/#build-it-from-source", 
            "text": "To build and install the package from source you could use  Git Package Management . \nThe GitHub repository of Image+ contains a  config.json  \nto build that package locally. Use this option, if you want to debug Image+ and/or contribute bugfixes and enhancements.   \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 13]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Build it from source"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Creating a new Template Variable\n\n\nOnce Image+ is installed, you can create Template Variables [TV] in the normal way, but instead of setting the \nInput \nType\n in Input Options to \nImage\n, select \nImage+\n instead.\n\n\nFor most use cases, you should also set the \nOutput Type\n in Output Options to \nImage+\n. This allows you to control \nthe image output on a resource.\n\n\nThe cropping tool\n\n\nWhen using an \nImage+\n TV, you could select an image exactly the same way as in a normal \nImage\n TV. Once an image \nis selected, a cropping window is displayed and you could select the area of the image to use. The original image is \nnot changed and so you can upload a single image, and re-use it in several places at different sizes (and crops with \nmultiple Image+ TVs) around the site.\n\n\nIf you want to change the cropping area, you have to click on the crop trigger of the Image+ TV. \n\n\nIn the cropping window you have to drag the handles of the dotted box to change the cropping area. If the TV was \nconfigured with size constraints or an aspect ratio, the crop area will be restricted to match this aspect ratio.\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 13]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#creating-a-new-template-variable", 
            "text": "Once Image+ is installed, you can create Template Variables [TV] in the normal way, but instead of setting the  Input \nType  in Input Options to  Image , select  Image+  instead.  For most use cases, you should also set the  Output Type  in Output Options to  Image+ . This allows you to control \nthe image output on a resource.", 
            "title": "Creating a new Template Variable"
        }, 
        {
            "location": "/getting-started/#the-cropping-tool", 
            "text": "When using an  Image+  TV, you could select an image exactly the same way as in a normal  Image  TV. Once an image \nis selected, a cropping window is displayed and you could select the area of the image to use. The original image is \nnot changed and so you can upload a single image, and re-use it in several places at different sizes (and crops with \nmultiple Image+ TVs) around the site.  If you want to change the cropping area, you have to click on the crop trigger of the Image+ TV.   In the cropping window you have to drag the handles of the dotted box to change the cropping area. If the TV was \nconfigured with size constraints or an aspect ratio, the crop area will be restricted to match this aspect ratio.   \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 13]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "The cropping tool"
        }, 
        {
            "location": "/usage/", 
            "text": "Input Options\n\n\nIn \nImage+\n you could control the final size and aspect ratio of selected images. There are several extended input \noptions available for of an \nImage+\n TV:\n\n\nTarget Height/Width\n\n\nImages can be constrained to a minimal height and/or width with \nTarget height\n and \nTarget width\n. If both values \nare set, the target aspect ratio of the output image is calculated with this values. Both fields have to be filled with \nan integer value.\n\n\nTarget Aspect Ratio\n\n\nThe aspect ratio for the output image could be restricted with \nTarget Aspect Ratio\n. If target height and target \nwidth are set, this value is ignored and the calculated aspect ratio of target height and target width is used. \nThe field has to be filled with a float value.\n\n\nIf you set only one value of \nTarget Height\n or \nTarget Width\n and leave empty \nTarget Aspect Ratio\n, the size of \nthe crop is not restricted to any aspect ratio.\n\n\n\n    \n\n        How to calculate float value\n    \n\n    \n\n        For setting an aspect ratio using a float value: this value is easily acquired by dividing any width of a desired aspect ratio by its corresponding height. So say you want to all your crops to have the same aspect ratio as a 1600x1000 image, simply divide 1600 by 1000, resulting in 1.6. This is your float value.\n    \n\n\n\n\n\nShow Alt Tag Field\n\n\nImage+\n TVs can also contain an \nAlt Tag Field\n, which is an additional text input, that is stored with each image. \nIt could be output alongside the image i.e. as an alt-tag or title-tag.\n\n\nIn order to output the alt text in a \nImage+\n TV placeholder, you will need to select an chunk in the \nOutput \nOptions\n. You could also use the ImagePlus snippet and specify a template chunk in the snippet call options.\nThe alt text is filled in the placeholder \n[[+alt]]\n in that chunk.\n\n\nShow Caption Field\n\n\nImage+\n TVs can also contain an \nCaption Field\n, which is an additional text input, that is stored with each image. \nIt could be output beneath the image i.e. in an additional caption div.\n\n\nIn order to output the caption in a \nImage+\n TV placeholder, you will need to select an chunk in the \nOutput \nOptions\n. You could also use the ImagePlus snippet and specify a template chunk in the snippet call options. \nThe caption is filled in the placeholder \n[[+caption]]\n in that chunk.\n\n\nShow Credits Field\n\n\nImage+\n TVs can also contain an \nCredits Field\n, which is an additional text input, that is stored with each image. \nIt could be output beneath the image i.e. in an additional credits div.\n\n\nIn order to output the credits in a \nImage+\n TV placeholder, you will need to select an chunk in the \nOutput \nOptions\n. You could also use the ImagePlus snippet and specify a template chunk in the snippet call options.\nThe credits are filled in the placeholder \n[[+credits]]\n in that chunk.\n\n\nAllow Empty\n\n\nIf \nAllow Empty\n is set to \nNo\n, you will not be able to save a resource until you have selected an image and \ncropped it.\n\n\nOutput Options\n\n\nThere are several extended output options available for of an \nImage+\n TV:\n\n\nAdditional phpThumb Parameters\n\n\nAs default an \nImage+\n TV returns an relative URL to an cropped (and maybe constrained) image that is scaled by \nphpThumb. With this output option, you could assign several additional phpThumb parameters, that are used to generate \nthe thumbnail image.\n\n\nOutput Chunk\n\n\nIf you select an \nOutput Chunk\n the TV output is rendered with that chunk. Select the chunk name from the dropdown. \nSeveral placeholders are possible in that chunk to customize the output:\n\n\n\n\n\n\n\n\nPlaceholder\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nURL of the thumbnail image\n\n\n\n\n\n\nalt\n\n\nAlt text\n\n\n\n\n\n\nwidth\n\n\nMinimal width of the thumbnail image\n\n\n\n\n\n\nheight\n\n\nMinimal height of the thumbnail image\n\n\n\n\n\n\nsource.src\n\n\nURL of the source image\n\n\n\n\n\n\nsource.width\n\n\nWidth of the source image\n\n\n\n\n\n\nsource.height\n\n\nHeight of the source image\n\n\n\n\n\n\ncrop.width\n\n\nCrop width of the thumbnail image\n\n\n\n\n\n\ncrop.height\n\n\nCrop height of the thumbnail image\n\n\n\n\n\n\ncrop.x\n\n\nCrop x position of the thumbnail image\n\n\n\n\n\n\ncrop.y\n\n\nCrop y position of the thumbnail image\n\n\n\n\n\n\noptions\n\n\nCrop engine full option string to generate the thumbnail image\n\n\n\n\n\n\ncrop.options\n\n\nCrop engine crop option string to generate the thumbnail image\n\n\n\n\n\n\n\n\nAll these placeholders could be used in the Snippet too.\n\n\nGenerate Thumb URL\n\n\nIf you create the thumbnail in output chunk i.e. by a pthumb output filter, you could disable the generation of the \ninternal thumb URL. \n\n\nSnippet\n\n\nThe Snippet gives you a second option to render the TV value. With the template variable output, you are \nrestricted to one output chunk per template variable, with the snippet you could be more flexiple use different output chunks. The following \nproperties could be set in the snippet call:\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntvname\n\n\nName of the Image+ TV.\n\n\n-\n\n\n\n\n\n\ndocid\n\n\nResource where the Image+ TV value is received from.\n\n\nCurrent resource\n\n\n\n\n\n\ntype\n\n\nType of the snippet output. Could be set to \ncheck\n \n1\n, \ntpl\n \n2\n and \nthumb\n \n3\n.\n\n\nthumb\n\n\n\n\n\n\noptions\n\n\nExtended phpThumb options for the image \n4\n.\n\n\n-\n\n\n\n\n\n\ntpl\n\n\nTemplate chunk for the snippet output \n5\n.\n\n\nImagePlus.image\n\n\n\n\n\n\nvalue\n\n\nUse your own JSON encoded value for the snippet output. The properties \ntvname\n and \ndocid\n are ignored.\n\n\n-\n\n\n\n\n\n\ndebug\n\n\nLog debug informations in MODX error log.\n\n\nNo\n\n\n\n\n\n\n\n\nExample\n\n\n[[ImagePlus? \n\ntvname=`imageplus` \n\ndocid=`1`\n\noptions=`w=100` \n\ntype=`tpl` \n\ntpl=`ImagePlus.demo`\n]]\n\n\n\n\nWill output the content of the template variable with the name \nimageplus\n of resource \n1\n and the extended phpThumb option \nw=100\n (width: 100px) in the parsed \nImagePlus.demo\n chunk.\n\n\nSystem Settings\n\n\nImagePlus uses the following system settings in the namespace \nimageplus\n:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nimageplus.debug\n\n\nLog debug informations in MODX error log.\n\n\nNo\n\n\n\n\n\n\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 13]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutputs \nimage\n if the Image+ TV contains an image, otherwise \nnoimage\n.\n\n\n\n\n\n\nOutputs the parsed template set by \ntpl\n property for retreived Image+ TV value (with additional options set by the \noptions\n property) \n\n\n\n\n\n\nOutputs the thumbnail URL for retreived Image+ TV value (with additional options set by the \noptions\n property)\n\n\n\n\n\n\nSee \nphpThumb readme\n for possible options. Maybe not all options are valid in your installation (because of crop engine limitations or server restricions).\n\n\n\n\n\n\nThe template chunk placeholder are the same as in the output chunk of the template variable.", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#input-options", 
            "text": "In  Image+  you could control the final size and aspect ratio of selected images. There are several extended input \noptions available for of an  Image+  TV:  Target Height/Width  Images can be constrained to a minimal height and/or width with  Target height  and  Target width . If both values \nare set, the target aspect ratio of the output image is calculated with this values. Both fields have to be filled with \nan integer value.  Target Aspect Ratio  The aspect ratio for the output image could be restricted with  Target Aspect Ratio . If target height and target \nwidth are set, this value is ignored and the calculated aspect ratio of target height and target width is used. \nThe field has to be filled with a float value.  If you set only one value of  Target Height  or  Target Width  and leave empty  Target Aspect Ratio , the size of \nthe crop is not restricted to any aspect ratio.  \n     \n        How to calculate float value\n     \n     \n        For setting an aspect ratio using a float value: this value is easily acquired by dividing any width of a desired aspect ratio by its corresponding height. So say you want to all your crops to have the same aspect ratio as a 1600x1000 image, simply divide 1600 by 1000, resulting in 1.6. This is your float value.\n       Show Alt Tag Field  Image+  TVs can also contain an  Alt Tag Field , which is an additional text input, that is stored with each image. \nIt could be output alongside the image i.e. as an alt-tag or title-tag.  In order to output the alt text in a  Image+  TV placeholder, you will need to select an chunk in the  Output \nOptions . You could also use the ImagePlus snippet and specify a template chunk in the snippet call options.\nThe alt text is filled in the placeholder  [[+alt]]  in that chunk.  Show Caption Field  Image+  TVs can also contain an  Caption Field , which is an additional text input, that is stored with each image. \nIt could be output beneath the image i.e. in an additional caption div.  In order to output the caption in a  Image+  TV placeholder, you will need to select an chunk in the  Output \nOptions . You could also use the ImagePlus snippet and specify a template chunk in the snippet call options. \nThe caption is filled in the placeholder  [[+caption]]  in that chunk.  Show Credits Field  Image+  TVs can also contain an  Credits Field , which is an additional text input, that is stored with each image. \nIt could be output beneath the image i.e. in an additional credits div.  In order to output the credits in a  Image+  TV placeholder, you will need to select an chunk in the  Output \nOptions . You could also use the ImagePlus snippet and specify a template chunk in the snippet call options.\nThe credits are filled in the placeholder  [[+credits]]  in that chunk.  Allow Empty  If  Allow Empty  is set to  No , you will not be able to save a resource until you have selected an image and \ncropped it.", 
            "title": "Input Options"
        }, 
        {
            "location": "/usage/#output-options", 
            "text": "There are several extended output options available for of an  Image+  TV:  Additional phpThumb Parameters  As default an  Image+  TV returns an relative URL to an cropped (and maybe constrained) image that is scaled by \nphpThumb. With this output option, you could assign several additional phpThumb parameters, that are used to generate \nthe thumbnail image.  Output Chunk  If you select an  Output Chunk  the TV output is rendered with that chunk. Select the chunk name from the dropdown. \nSeveral placeholders are possible in that chunk to customize the output:     Placeholder  Description      url  URL of the thumbnail image    alt  Alt text    width  Minimal width of the thumbnail image    height  Minimal height of the thumbnail image    source.src  URL of the source image    source.width  Width of the source image    source.height  Height of the source image    crop.width  Crop width of the thumbnail image    crop.height  Crop height of the thumbnail image    crop.x  Crop x position of the thumbnail image    crop.y  Crop y position of the thumbnail image    options  Crop engine full option string to generate the thumbnail image    crop.options  Crop engine crop option string to generate the thumbnail image     All these placeholders could be used in the Snippet too.  Generate Thumb URL  If you create the thumbnail in output chunk i.e. by a pthumb output filter, you could disable the generation of the \ninternal thumb URL.", 
            "title": "Output Options"
        }, 
        {
            "location": "/usage/#snippet", 
            "text": "The Snippet gives you a second option to render the TV value. With the template variable output, you are \nrestricted to one output chunk per template variable, with the snippet you could be more flexiple use different output chunks. The following \nproperties could be set in the snippet call:     Property  Description  Default      tvname  Name of the Image+ TV.  -    docid  Resource where the Image+ TV value is received from.  Current resource    type  Type of the snippet output. Could be set to  check   1 ,  tpl   2  and  thumb   3 .  thumb    options  Extended phpThumb options for the image  4 .  -    tpl  Template chunk for the snippet output  5 .  ImagePlus.image    value  Use your own JSON encoded value for the snippet output. The properties  tvname  and  docid  are ignored.  -    debug  Log debug informations in MODX error log.  No     Example  [[ImagePlus?  tvname=`imageplus`  docid=`1` options=`w=100`  type=`tpl`  tpl=`ImagePlus.demo`\n]]  Will output the content of the template variable with the name  imageplus  of resource  1  and the extended phpThumb option  w=100  (width: 100px) in the parsed  ImagePlus.demo  chunk.", 
            "title": "Snippet"
        }, 
        {
            "location": "/usage/#system-settings", 
            "text": "ImagePlus uses the following system settings in the namespace  imageplus :     Key  Description  Default      imageplus.debug  Log debug informations in MODX error log.  No      \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 13]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();        Outputs  image  if the Image+ TV contains an image, otherwise  noimage .    Outputs the parsed template set by  tpl  property for retreived Image+ TV value (with additional options set by the  options  property)     Outputs the thumbnail URL for retreived Image+ TV value (with additional options set by the  options  property)    See  phpThumb readme  for possible options. Maybe not all options are valid in your installation (because of crop engine limitations or server restricions).    The template chunk placeholder are the same as in the output chunk of the template variable.", 
            "title": "System Settings"
        }, 
        {
            "location": "/examples/", 
            "text": "Examples\n\n\n*\nImage+\n could be used for several purposes. On this page you find some examples how to use it:\n\n\nMIGX\n\n\nIf you want to use \nImage+\n in MIGX you could define all \nImage+\n TV properties with a JSON string in the 'Configs' textarea in the MIGX formtabs field configuration. The following properties are possible:\n\n\n{\n\ntargetWidth\n:\n,\n\ntargetHeight\n:\n,\n\ntargetRatio\n:\n,\n\nthumbnailWidth\n:\n,\n\nallowAltTag\n:\n\n}\n\n\n\n\nAnd you also have to change the \nInput TV Type\n to \nimageplus\n.\n\n\nYou could show the thumbnail in the grid column by setting the renderer to 'ImagePlus.MIGX_Renderer'. In prior MIGX versions you have to raw edit a MIGX configuration for that. \n\n\nTo use that \nImage+\n-MIGX-Field in the Frontend, call the \nImagePlus\n-Snippet with just the value-parameter being the name of this MIGX-Field: \n\n\n[[ImagePlus? \n  \nvalue=`[[+migxImagePlusField]]`\n]]\n\n\n\n\nThis will get you the prepared URL for the cropped image, instead of the raw JSON-Object.\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 13]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();\n\n\n\n\n\n\n\n\n\n\ngetResources\n\n\nIn order for the TV to be parsed with getResources, make sure you add the following line to your getResources call:\n\n\nprocessTVs=`name_of_your_tv`\n\n\n\n\nResponsive images\n\n\nIf you want to display responsive images with and without the crop, you could use the ImagePlus snippet.\n\n\nSnippet Call\n\n\n[[ImagePlus? \n\ntvname=`yourtvname` \n\ntype=`tpl` \n\noptions=`\nw=320`\n\ntpl=`tplResponsiveImage`\n\npagetitle=`[[*pagetitle]]`\n]]\n\n\n\n\nChunk tplResponsiveImage\n\n\npicture\n\n    \nsource media=\n(min-width: 36em)\n\n            srcset=\n[[+source.src:pthumb=`w=1024`]] 1024w,\n                [[+source.src:pthumb=`w=640`]] 640w,\n                [[+source.src:pthumb=`w=320`]] 320w\n\n            sizes=\n33.3vw\n/\n\n    \nsource srcset=\n[[+source.src:pthumb=`[[+crop.options]]\nw=640`]] 2x,\n                [[+source.src:pthumb=`[[+crop.options]]\nw=320`]] 1x\n/\n\n    \nimg src=\n[[+url]]\n alt=\n[[+alt:default=`[[+pagetitle]]`]]\n/\n\n\n/picture", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#examples", 
            "text": "* Image+  could be used for several purposes. On this page you find some examples how to use it:", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#migx", 
            "text": "If you want to use  Image+  in MIGX you could define all  Image+  TV properties with a JSON string in the 'Configs' textarea in the MIGX formtabs field configuration. The following properties are possible:  { targetWidth : , targetHeight : , targetRatio : , thumbnailWidth : , allowAltTag : \n}  And you also have to change the  Input TV Type  to  imageplus .  You could show the thumbnail in the grid column by setting the renderer to 'ImagePlus.MIGX_Renderer'. In prior MIGX versions you have to raw edit a MIGX configuration for that.   To use that  Image+ -MIGX-Field in the Frontend, call the  ImagePlus -Snippet with just the value-parameter being the name of this MIGX-Field:   [[ImagePlus? \n   value=`[[+migxImagePlusField]]`\n]]  This will get you the prepared URL for the cropped image, instead of the raw JSON-Object.   \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 13]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "MIGX"
        }, 
        {
            "location": "/examples/#getresources", 
            "text": "In order for the TV to be parsed with getResources, make sure you add the following line to your getResources call:  processTVs=`name_of_your_tv`", 
            "title": "getResources"
        }, 
        {
            "location": "/examples/#responsive-images", 
            "text": "If you want to display responsive images with and without the crop, you could use the ImagePlus snippet.  Snippet Call  [[ImagePlus?  tvname=`yourtvname`  type=`tpl`  options=` w=320` tpl=`tplResponsiveImage` pagetitle=`[[*pagetitle]]`\n]]  Chunk tplResponsiveImage  picture \n     source media= (min-width: 36em) \n            srcset= [[+source.src:pthumb=`w=1024`]] 1024w,\n                [[+source.src:pthumb=`w=640`]] 640w,\n                [[+source.src:pthumb=`w=320`]] 320w \n            sizes= 33.3vw / \n     source srcset= [[+source.src:pthumb=`[[+crop.options]] w=640`]] 2x,\n                [[+source.src:pthumb=`[[+crop.options]] w=320`]] 1x / \n     img src= [[+url]]  alt= [[+alt:default=`[[+pagetitle]]`]] /  /picture", 
            "title": "Responsive images"
        }, 
        {
            "location": "/contributors/", 
            "text": "The Image+ project was started in 2012 by \nAlan Pich\n and is maintained and developed further since 2015 by \nThomas Jakobi\n.\n\n\nMany thanks to everyone else who has contributed to this project:\n\n\n\n\n@thomasd\n\n\n@em-piguet\n\n\n@tillilab\n\n\n@FlyGenring\n\n\nKristof Kotai\n\n\n@Alroniks\n\n\n@rtripault\n\n\n@TheBoxer\n\n\n@KristianP\n\n\n@silentworks\n\n\nNico Telfer\n\n\n@inreti\n\n\n@jcdm\n\n\n@Bruno17\n\n\n\n\nTranslations on Crowdin by:\n\n \n@alroniks\n\n\n \n@AmaZili\n\n\n \n@Bartholomej\n\n\n \n@dannevang\n\n\n \n@gljoslin1014\n\n\n \n@mac_aronie\n\n\n \n@modmore\n\n\n \n@serimarda\n\n* \n@krismas\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 13]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Contributors"
        }, 
        {
            "location": "/donate/", 
            "text": "Support Image+\n\n\nImage+\n is and always will be free and open-source, but it still requires many man-hours of development and bug-fixing \nbetween the releases.\n\n\nPlease support the ongoing and past development of \nImage+\n by making a donation below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 13]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Donate"
        }, 
        {
            "location": "/donate/#support-image", 
            "text": "Image+  is and always will be free and open-source, but it still requires many man-hours of development and bug-fixing \nbetween the releases.  Please support the ongoing and past development of  Image+  by making a donation below.            \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 13]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Support Image+"
        }
    ]
}